{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nconst SEARCH_API_BASE_URL = process.env.REACT_APP_SEARCH_API_URL || 'http://localhost:8001/api/v1';\nexport const api = axios.create({\n  baseURL: BASE_URL,\n  withCredentials: true\n});\n\n// Request interceptor for auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Error handling interceptor\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized errors\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Create organized API services\nexport const authAPI = {\n  login: credentials => api.post('/api/users/login', credentials),\n  register: userData => api.post('/api/users/register', userData),\n  getProfile: () => api.get('/api/users/me'),\n  updateProfile: data => api.put('/api/users/me', data)\n};\nexport const documentsAPI = {\n  upload: formData => api.post('/api/documents/upload', formData),\n  getAll: () => api.get('/api/documents'),\n  getById: id => api.get(`/api/documents/${id}`),\n  analyze: (id, data) => api.post(`/api/documents/${id}/analyze`, data),\n  chat: (id, data) => api.post(`/api/documents/${id}/chat`, data),\n  getChatHistory: id => api.get(`/api/documents/${id}/chat_history`)\n};\nexport const contractsAPI = {\n  generate: data => api.post('/api/contracts/generate', data),\n  getTemplates: () => api.get('/api/contracts/templates')\n};\nexport const chatAPI = {\n  sendMessage: data => api.post('/api/chat', data),\n  getHistory: () => api.get('/api/chat/history')\n};\n\n// --- Search Service API --- \n\n// Create a separate axios instance for the search service\nconst searchApiClient = axios.create({\n  baseURL: SEARCH_API_BASE_URL\n});\n\n// Optional: Add interceptors specific to search service if needed later\n// searchApiClient.interceptors.request.use(...);\n// searchApiClient.interceptors.response.use(...);\n\nexport const searchAPI = {\n  /**\n   * Performs semantic search for legal documents.\n   * @param {object} data - The search query and parameters.\n   * @param {string} data.query - The search text.\n   * @param {number} [data.top_k=5] - The number of results to return.\n   * @returns {Promise<object>} - A promise that resolves to the search results { results: [...] }.\n   */\n  searchLegalDocs: data => searchApiClient.post('/search', data),\n  /**\n   * Asks a legal question using RAG.\n   * @param {object} data - The RAG query data.\n   * @param {string} data.question - The legal question.\n   * @param {number} [data.top_k_retrieval=3] - Number of chunks to retrieve.\n   * @returns {Promise<object>} - Promise resolving to { answer: \"...\", citations: [...] }.\n   */\n  askLegalQuestion: data => searchApiClient.post('/query', data),\n  /**\n   * Uploads legal documents for ingestion.\n   * @param {FormData} formData - The FormData object containing the files.\n   * @returns {Promise<object>} - Promise resolving to { message: \"...\", filenames: [...] }.\n   */\n  uploadLegalDocs: formData => searchApiClient.post('/documents/upload', formData, {\n    // Important: Set Content-Type header for file uploads\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n    // Optional: Add progress tracking later\n    // onUploadProgress: progressEvent => { ... }\n  })\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","SEARCH_API_BASE_URL","REACT_APP_SEARCH_API_URL","api","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","register","userData","getProfile","get","updateProfile","data","put","documentsAPI","upload","formData","getAll","getById","id","analyze","chat","getChatHistory","contractsAPI","generate","getTemplates","chatAPI","sendMessage","getHistory","searchApiClient","searchAPI","searchLegalDocs","askLegalQuestion","uploadLegalDocs"],"sources":["/Users/venkata/startup/legal_app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nconst SEARCH_API_BASE_URL = process.env.REACT_APP_SEARCH_API_URL || 'http://localhost:8001/api/v1';\n\nexport const api = axios.create({\n  baseURL: BASE_URL,\n  withCredentials: true,\n});\n\n// Request interceptor for auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Error handling interceptor\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized errors\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Create organized API services\nexport const authAPI = {\n  login: (credentials) => api.post('/api/users/login', credentials),\n  register: (userData) => api.post('/api/users/register', userData),\n  getProfile: () => api.get('/api/users/me'),\n  updateProfile: (data) => api.put('/api/users/me', data),\n};\n\nexport const documentsAPI = {\n  upload: (formData) => api.post('/api/documents/upload', formData),\n  getAll: () => api.get('/api/documents'),\n  getById: (id) => api.get(`/api/documents/${id}`),\n  analyze: (id, data) => api.post(`/api/documents/${id}/analyze`, data),\n  chat: (id, data) => api.post(`/api/documents/${id}/chat`, data),\n  getChatHistory: (id) => api.get(`/api/documents/${id}/chat_history`),\n};\n\nexport const contractsAPI = {\n  generate: (data) => api.post('/api/contracts/generate', data),\n  getTemplates: () => api.get('/api/contracts/templates'),\n};\n\nexport const chatAPI = {\n  sendMessage: (data) => api.post('/api/chat', data),\n  getHistory: () => api.get('/api/chat/history'),\n};\n\n// --- Search Service API --- \n\n// Create a separate axios instance for the search service\nconst searchApiClient = axios.create({\n  baseURL: SEARCH_API_BASE_URL,\n});\n\n// Optional: Add interceptors specific to search service if needed later\n// searchApiClient.interceptors.request.use(...);\n// searchApiClient.interceptors.response.use(...);\n\nexport const searchAPI = {\n  /**\n   * Performs semantic search for legal documents.\n   * @param {object} data - The search query and parameters.\n   * @param {string} data.query - The search text.\n   * @param {number} [data.top_k=5] - The number of results to return.\n   * @returns {Promise<object>} - A promise that resolves to the search results { results: [...] }.\n   */\n  searchLegalDocs: (data) => searchApiClient.post('/search', data),\n\n  /**\n   * Asks a legal question using RAG.\n   * @param {object} data - The RAG query data.\n   * @param {string} data.question - The legal question.\n   * @param {number} [data.top_k_retrieval=3] - Number of chunks to retrieve.\n   * @returns {Promise<object>} - Promise resolving to { answer: \"...\", citations: [...] }.\n   */\n  askLegalQuestion: (data) => searchApiClient.post('/query', data),\n\n  /**\n   * Uploads legal documents for ingestion.\n   * @param {FormData} formData - The FormData object containing the files.\n   * @returns {Promise<object>} - Promise resolving to { message: \"...\", filenames: [...] }.\n   */\n  uploadLegalDocs: (formData) => searchApiClient.post('/documents/upload', formData, {\n    // Important: Set Content-Type header for file uploads\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n    // Optional: Add progress tracking later\n    // onUploadProgress: progressEvent => { ... }\n  }),\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}