{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// Import the actual API service function\nimport { searchAPI } from '../services/api';\nconst initialState = {\n  searchQuery: '',\n  searchResults: [],\n  selectedCase: null,\n  prediction: null,\n  loading: false,\n  error: null,\n  // New state for legal document vector search\n  legalDocQuery: '',\n  legalDocResults: [],\n  legalDocLoading: false,\n  legalDocError: null,\n  // New state for RAG results\n  ragQuestion: '',\n  ragAnswer: '',\n  ragCitations: [],\n  ragLoading: false,\n  ragError: null\n};\n\n// --- New Async Thunk for Legal Doc Search --- \nexport const fetchLegalDocResults = createAsyncThunk('research/fetchLegalDocs', async (searchData, {\n  rejectWithValue\n}) => {\n  // searchData should be an object like { query: \"...\", top_k: 5 }\n  try {\n    const response = await searchAPI.searchLegalDocs(searchData);\n    // Assuming the API returns { results: [...] } structure matching SearchResponse schema\n    return response.data.results;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"Error fetching legal doc results:\", error);\n    const errorMsg = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Failed to fetch search results';\n    return rejectWithValue(errorMsg);\n  }\n});\n\n// --- New Async Thunk for RAG Query --- \nexport const fetchRagAnswer = createAsyncThunk('research/fetchRagAnswer', async (ragData, {\n  rejectWithValue\n}) => {\n  // ragData should be { question: \"...\", top_k_retrieval: 3 }\n  try {\n    const response = await searchAPI.askLegalQuestion(ragData);\n    // API returns { answer: \"...\", citations: [...] }\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error(\"Error fetching RAG answer:\", error);\n    const errorMsg = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || error.message || 'Failed to fetch RAG answer';\n    return rejectWithValue(errorMsg);\n  }\n});\nexport const researchSlice = createSlice({\n  name: 'research',\n  initialState,\n  reducers: {\n    searchCasesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    searchCasesSuccess: (state, action) => {\n      state.loading = false;\n      state.searchResults = action.payload;\n    },\n    searchCasesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    predictOutcomeStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    predictOutcomeSuccess: (state, action) => {\n      state.loading = false;\n      state.prediction = action.payload;\n    },\n    predictOutcomeFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setSearchQuery: (state, action) => {\n      state.searchQuery = action.payload;\n    },\n    setSelectedCase: (state, action) => {\n      state.selectedCase = action.payload;\n    },\n    clearPrediction: state => {\n      state.prediction = null;\n    },\n    clearError: state => {\n      state.error = null;\n      state.legalDocError = null; // Also clear new error state\n    },\n    // New reducer to set the specific query for legal docs\n    setLegalDocQuery: (state, action) => {\n      state.legalDocQuery = action.payload;\n    },\n    clearLegalDocResults: state => {\n      state.legalDocResults = [];\n      state.legalDocQuery = '';\n      state.legalDocError = null;\n      // Also clear RAG state when clearing\n      state.ragQuestion = '';\n      state.ragAnswer = '';\n      state.ragCitations = [];\n      state.ragError = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Handle fetchLegalDocResults lifecycle\n    .addCase(fetchLegalDocResults.pending, state => {\n      state.legalDocLoading = true;\n      state.legalDocError = null;\n    }).addCase(fetchLegalDocResults.fulfilled, (state, action) => {\n      state.legalDocLoading = false;\n      state.legalDocResults = action.payload;\n      state.legalDocQuery = action.meta.arg.query; // Store the query that produced results\n    }).addCase(fetchLegalDocResults.rejected, (state, action) => {\n      state.legalDocLoading = false;\n      state.legalDocError = action.payload; // Error message from rejectWithValue\n      state.legalDocResults = []; // Clear results on error\n    })\n    // Handle fetchRagAnswer lifecycle\n    .addCase(fetchRagAnswer.pending, (state, action) => {\n      state.ragLoading = true;\n      state.ragError = null;\n      state.ragQuestion = action.meta.arg.question; // Store question being asked\n      state.ragAnswer = ''; // Clear previous answer\n      state.ragCitations = []; // Clear previous citations\n    }).addCase(fetchRagAnswer.fulfilled, (state, action) => {\n      state.ragLoading = false;\n      state.ragAnswer = action.payload.answer;\n      state.ragCitations = action.payload.citations;\n    }).addCase(fetchRagAnswer.rejected, (state, action) => {\n      state.ragLoading = false;\n      state.ragError = action.payload;\n      state.ragAnswer = ''; // Clear answer on error\n      state.ragCitations = [];\n    });\n  }\n});\nexport const {\n  searchCasesStart,\n  searchCasesSuccess,\n  searchCasesFailure,\n  predictOutcomeStart,\n  predictOutcomeSuccess,\n  predictOutcomeFailure,\n  setSearchQuery,\n  setSelectedCase,\n  clearPrediction,\n  clearError,\n  setLegalDocQuery,\n  clearLegalDocResults\n} = researchSlice.actions;\n\n// Thunk actions\nexport const searchCases = (query, filters) => async dispatch => {\n  try {\n    dispatch(searchCasesStart());\n    dispatch(setSearchQuery(query));\n\n    // In a real app, this would call the API service\n    // const response = await researchService.searchCases(query, filters);\n\n    // Simulate API call for demo\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    const response = [{\n      id: '1',\n      title: 'Smith v. Jones (2023)',\n      content: 'The court ruled in favor of the plaintiff, finding that the defendant had breached the contract by failing to deliver the goods on time.',\n      source: 'Supreme Court',\n      relevance_score: 0.95\n    }, {\n      id: '2',\n      title: 'Wilson Corp v. Allen Inc (2022)',\n      content: 'The court found that the non-compete clause was overly broad and therefore unenforceable under state law.',\n      source: 'Court of Appeals',\n      relevance_score: 0.87\n    }, {\n      id: '3',\n      title: 'Parker LLC v. Thompson (2021)',\n      content: 'The court held that the defendant was not liable for damages as the force majeure clause in the contract covered the circumstances in question.',\n      source: 'District Court',\n      relevance_score: 0.82\n    }];\n    dispatch(searchCasesSuccess(response));\n    return response;\n  } catch (error) {\n    dispatch(searchCasesFailure(error.message));\n    throw error;\n  }\n};\nexport const predictOutcome = (caseDetails, llmModel) => async dispatch => {\n  try {\n    dispatch(predictOutcomeStart());\n\n    // In a real app, this would call the API service\n    // const response = await researchService.predictOutcome(caseDetails, llmModel);\n\n    // Simulate API call for demo\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    const response = {\n      prediction: \"Based on the provided information and similar cases, the court is likely to rule in favor of the plaintiff.\",\n      confidence: 0.78,\n      factors: [{\n        name: \"Precedent in similar cases\",\n        impact: \"high\"\n      }, {\n        name: \"Strength of evidence\",\n        impact: \"medium\"\n      }, {\n        name: \"Applicable statutes\",\n        impact: \"medium\"\n      }, {\n        name: \"Jurisdiction tendencies\",\n        impact: \"low\"\n      }],\n      similar_cases: [{\n        case_name: \"Smith v. Jones (2023)\",\n        similarity: 0.85\n      }, {\n        case_name: \"Wilson Corp v. Allen Inc (2022)\",\n        similarity: 0.72\n      }, {\n        case_name: \"Parker LLC v. Thompson (2021)\",\n        similarity: 0.68\n      }],\n      llm_model: llmModel\n    };\n    dispatch(predictOutcomeSuccess(response));\n    return response;\n  } catch (error) {\n    dispatch(predictOutcomeFailure(error.message));\n    throw error;\n  }\n};\nexport default researchSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","searchAPI","initialState","searchQuery","searchResults","selectedCase","prediction","loading","error","legalDocQuery","legalDocResults","legalDocLoading","legalDocError","ragQuestion","ragAnswer","ragCitations","ragLoading","ragError","fetchLegalDocResults","searchData","rejectWithValue","response","searchLegalDocs","data","results","_error$response","_error$response$data","console","errorMsg","detail","message","fetchRagAnswer","ragData","askLegalQuestion","_error$response2","_error$response2$data","researchSlice","name","reducers","searchCasesStart","state","searchCasesSuccess","action","payload","searchCasesFailure","predictOutcomeStart","predictOutcomeSuccess","predictOutcomeFailure","setSearchQuery","setSelectedCase","clearPrediction","clearError","setLegalDocQuery","clearLegalDocResults","extraReducers","builder","addCase","pending","fulfilled","meta","arg","query","rejected","question","answer","citations","actions","searchCases","filters","dispatch","Promise","resolve","setTimeout","id","title","content","source","relevance_score","predictOutcome","caseDetails","llmModel","confidence","factors","impact","similar_cases","case_name","similarity","llm_model","reducer"],"sources":["/Users/venkata/startup/legal_app/frontend/src/store/researchSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// Import the actual API service function\nimport { searchAPI } from '../services/api'; \n\nconst initialState = {\n  searchQuery: '',\n  searchResults: [],\n  selectedCase: null,\n  prediction: null,\n  loading: false,\n  error: null,\n\n  // New state for legal document vector search\n  legalDocQuery: '', \n  legalDocResults: [],\n  legalDocLoading: false,\n  legalDocError: null,\n\n  // New state for RAG results\n  ragQuestion: '',\n  ragAnswer: '',\n  ragCitations: [],\n  ragLoading: false,\n  ragError: null,\n};\n\n// --- New Async Thunk for Legal Doc Search --- \nexport const fetchLegalDocResults = createAsyncThunk(\n  'research/fetchLegalDocs',\n  async (searchData, { rejectWithValue }) => {\n    // searchData should be an object like { query: \"...\", top_k: 5 }\n    try {\n      const response = await searchAPI.searchLegalDocs(searchData);\n      // Assuming the API returns { results: [...] } structure matching SearchResponse schema\n      return response.data.results; \n    } catch (error) {\n      console.error(\"Error fetching legal doc results:\", error);\n      const errorMsg = error.response?.data?.detail || error.message || 'Failed to fetch search results';\n      return rejectWithValue(errorMsg);\n    }\n  }\n);\n\n// --- New Async Thunk for RAG Query --- \nexport const fetchRagAnswer = createAsyncThunk(\n  'research/fetchRagAnswer',\n  async (ragData, { rejectWithValue }) => {\n    // ragData should be { question: \"...\", top_k_retrieval: 3 }\n    try {\n      const response = await searchAPI.askLegalQuestion(ragData);\n      // API returns { answer: \"...\", citations: [...] }\n      return response.data; \n    } catch (error) {\n      console.error(\"Error fetching RAG answer:\", error);\n      const errorMsg = error.response?.data?.detail || error.message || 'Failed to fetch RAG answer';\n      return rejectWithValue(errorMsg);\n    }\n  }\n);\n\nexport const researchSlice = createSlice({\n  name: 'research',\n  initialState,\n  reducers: {\n    searchCasesStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    searchCasesSuccess: (state, action) => {\n      state.loading = false;\n      state.searchResults = action.payload;\n    },\n    searchCasesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    predictOutcomeStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    predictOutcomeSuccess: (state, action) => {\n      state.loading = false;\n      state.prediction = action.payload;\n    },\n    predictOutcomeFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setSearchQuery: (state, action) => {\n      state.searchQuery = action.payload;\n    },\n    setSelectedCase: (state, action) => {\n      state.selectedCase = action.payload;\n    },\n    clearPrediction: (state) => {\n      state.prediction = null;\n    },\n    clearError: (state) => {\n      state.error = null;\n      state.legalDocError = null; // Also clear new error state\n    },\n\n    // New reducer to set the specific query for legal docs\n    setLegalDocQuery: (state, action) => {\n      state.legalDocQuery = action.payload;\n    },\n    clearLegalDocResults: (state) => {\n        state.legalDocResults = [];\n        state.legalDocQuery = '';\n        state.legalDocError = null;\n        // Also clear RAG state when clearing\n        state.ragQuestion = '';\n        state.ragAnswer = '';\n        state.ragCitations = [];\n        state.ragError = null;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // Handle fetchLegalDocResults lifecycle\n      .addCase(fetchLegalDocResults.pending, (state) => {\n        state.legalDocLoading = true;\n        state.legalDocError = null;\n      })\n      .addCase(fetchLegalDocResults.fulfilled, (state, action) => {\n        state.legalDocLoading = false;\n        state.legalDocResults = action.payload; \n        state.legalDocQuery = action.meta.arg.query; // Store the query that produced results\n      })\n      .addCase(fetchLegalDocResults.rejected, (state, action) => {\n        state.legalDocLoading = false;\n        state.legalDocError = action.payload; // Error message from rejectWithValue\n        state.legalDocResults = []; // Clear results on error\n      })\n      // Handle fetchRagAnswer lifecycle\n      .addCase(fetchRagAnswer.pending, (state, action) => {\n        state.ragLoading = true;\n        state.ragError = null;\n        state.ragQuestion = action.meta.arg.question; // Store question being asked\n        state.ragAnswer = ''; // Clear previous answer\n        state.ragCitations = []; // Clear previous citations\n      })\n      .addCase(fetchRagAnswer.fulfilled, (state, action) => {\n        state.ragLoading = false;\n        state.ragAnswer = action.payload.answer;\n        state.ragCitations = action.payload.citations;\n      })\n      .addCase(fetchRagAnswer.rejected, (state, action) => {\n        state.ragLoading = false;\n        state.ragError = action.payload; \n        state.ragAnswer = ''; // Clear answer on error\n        state.ragCitations = [];\n      });\n  }\n});\n\nexport const {\n  searchCasesStart,\n  searchCasesSuccess,\n  searchCasesFailure,\n  predictOutcomeStart,\n  predictOutcomeSuccess,\n  predictOutcomeFailure,\n  setSearchQuery,\n  setSelectedCase,\n  clearPrediction,\n  clearError,\n  setLegalDocQuery,\n  clearLegalDocResults\n} = researchSlice.actions;\n\n// Thunk actions\nexport const searchCases = (query, filters) => async (dispatch) => {\n  try {\n    dispatch(searchCasesStart());\n    dispatch(setSearchQuery(query));\n    \n    // In a real app, this would call the API service\n    // const response = await researchService.searchCases(query, filters);\n    \n    // Simulate API call for demo\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    const response = [\n      {\n        id: '1',\n        title: 'Smith v. Jones (2023)',\n        content: 'The court ruled in favor of the plaintiff, finding that the defendant had breached the contract by failing to deliver the goods on time.',\n        source: 'Supreme Court',\n        relevance_score: 0.95\n      },\n      {\n        id: '2',\n        title: 'Wilson Corp v. Allen Inc (2022)',\n        content: 'The court found that the non-compete clause was overly broad and therefore unenforceable under state law.',\n        source: 'Court of Appeals',\n        relevance_score: 0.87\n      },\n      {\n        id: '3',\n        title: 'Parker LLC v. Thompson (2021)',\n        content: 'The court held that the defendant was not liable for damages as the force majeure clause in the contract covered the circumstances in question.',\n        source: 'District Court',\n        relevance_score: 0.82\n      }\n    ];\n    \n    dispatch(searchCasesSuccess(response));\n    return response;\n  } catch (error) {\n    dispatch(searchCasesFailure(error.message));\n    throw error;\n  }\n};\n\nexport const predictOutcome = (caseDetails, llmModel) => async (dispatch) => {\n  try {\n    dispatch(predictOutcomeStart());\n    \n    // In a real app, this would call the API service\n    // const response = await researchService.predictOutcome(caseDetails, llmModel);\n    \n    // Simulate API call for demo\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    const response = {\n      prediction: \"Based on the provided information and similar cases, the court is likely to rule in favor of the plaintiff.\",\n      confidence: 0.78,\n      factors: [\n        { name: \"Precedent in similar cases\", impact: \"high\" },\n        { name: \"Strength of evidence\", impact: \"medium\" },\n        { name: \"Applicable statutes\", impact: \"medium\" },\n        { name: \"Jurisdiction tendencies\", impact: \"low\" }\n      ],\n      similar_cases: [\n        { case_name: \"Smith v. Jones (2023)\", similarity: 0.85 },\n        { case_name: \"Wilson Corp v. Allen Inc (2022)\", similarity: 0.72 },\n        { case_name: \"Parker LLC v. Thompson (2021)\", similarity: 0.68 }\n      ],\n      llm_model: llmModel\n    };\n    \n    dispatch(predictOutcomeSuccess(response));\n    return response;\n  } catch (error) {\n    dispatch(predictOutcomeFailure(error.message));\n    throw error;\n  }\n};\n\nexport default researchSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}