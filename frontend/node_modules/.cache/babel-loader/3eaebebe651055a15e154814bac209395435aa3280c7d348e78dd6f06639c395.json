{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  searchQuery: '',\n  searchResults: [],\n  selectedCase: null,\n  prediction: null,\n  loading: false,\n  error: null\n};\nexport const researchSlice = createSlice({\n  name: 'research',\n  initialState,\n  reducers: {\n    searchCasesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    searchCasesSuccess: (state, action) => {\n      state.loading = false;\n      state.searchResults = action.payload;\n    },\n    searchCasesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    predictOutcomeStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    predictOutcomeSuccess: (state, action) => {\n      state.loading = false;\n      state.prediction = action.payload;\n    },\n    predictOutcomeFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setSearchQuery: (state, action) => {\n      state.searchQuery = action.payload;\n    },\n    setSelectedCase: (state, action) => {\n      state.selectedCase = action.payload;\n    },\n    clearPrediction: state => {\n      state.prediction = null;\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  }\n});\nexport const {\n  searchCasesStart,\n  searchCasesSuccess,\n  searchCasesFailure,\n  predictOutcomeStart,\n  predictOutcomeSuccess,\n  predictOutcomeFailure,\n  setSearchQuery,\n  setSelectedCase,\n  clearPrediction,\n  clearError\n} = researchSlice.actions;\n\n// Thunk actions\nexport const searchCases = (query, filters) => async dispatch => {\n  try {\n    dispatch(searchCasesStart());\n    dispatch(setSearchQuery(query));\n\n    // In a real app, this would call the API service\n    // const response = await researchService.searchCases(query, filters);\n\n    // Simulate API call for demo\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    const response = [{\n      id: '1',\n      title: 'Smith v. Jones (2023)',\n      content: 'The court ruled in favor of the plaintiff, finding that the defendant had breached the contract by failing to deliver the goods on time.',\n      source: 'Supreme Court',\n      relevance_score: 0.95\n    }, {\n      id: '2',\n      title: 'Wilson Corp v. Allen Inc (2022)',\n      content: 'The court found that the non-compete clause was overly broad and therefore unenforceable under state law.',\n      source: 'Court of Appeals',\n      relevance_score: 0.87\n    }, {\n      id: '3',\n      title: 'Parker LLC v. Thompson (2021)',\n      content: 'The court held that the defendant was not liable for damages as the force majeure clause in the contract covered the circumstances in question.',\n      source: 'District Court',\n      relevance_score: 0.82\n    }];\n    dispatch(searchCasesSuccess(response));\n    return response;\n  } catch (error) {\n    dispatch(searchCasesFailure(error.message));\n    throw error;\n  }\n};\nexport const predictOutcome = (caseDetails, llmModel) => async dispatch => {\n  try {\n    dispatch(predictOutcomeStart());\n\n    // In a real app, this would call the API service\n    // const response = await researchService.predictOutcome(caseDetails, llmModel);\n\n    // Simulate API call for demo\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    const response = {\n      prediction: \"Based on the provided information and similar cases, the court is likely to rule in favor of the plaintiff.\",\n      confidence: 0.78,\n      factors: [{\n        name: \"Precedent in similar cases\",\n        impact: \"high\"\n      }, {\n        name: \"Strength of evidence\",\n        impact: \"medium\"\n      }, {\n        name: \"Applicable statutes\",\n        impact: \"medium\"\n      }, {\n        name: \"Jurisdiction tendencies\",\n        impact: \"low\"\n      }],\n      similar_cases: [{\n        case_name: \"Smith v. Jones (2023)\",\n        similarity: 0.85\n      }, {\n        case_name: \"Wilson Corp v. Allen Inc (2022)\",\n        similarity: 0.72\n      }, {\n        case_name: \"Parker LLC v. Thompson (2021)\",\n        similarity: 0.68\n      }],\n      llm_model: llmModel\n    };\n    dispatch(predictOutcomeSuccess(response));\n    return response;\n  } catch (error) {\n    dispatch(predictOutcomeFailure(error.message));\n    throw error;\n  }\n};\nexport default researchSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","searchQuery","searchResults","selectedCase","prediction","loading","error","researchSlice","name","reducers","searchCasesStart","state","searchCasesSuccess","action","payload","searchCasesFailure","predictOutcomeStart","predictOutcomeSuccess","predictOutcomeFailure","setSearchQuery","setSelectedCase","clearPrediction","clearError","actions","searchCases","query","filters","dispatch","Promise","resolve","setTimeout","response","id","title","content","source","relevance_score","message","predictOutcome","caseDetails","llmModel","confidence","factors","impact","similar_cases","case_name","similarity","llm_model","reducer"],"sources":["/Users/venkata/startup/legal_app/frontend/src/store/researchSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  searchQuery: '',\n  searchResults: [],\n  selectedCase: null,\n  prediction: null,\n  loading: false,\n  error: null\n};\n\nexport const researchSlice = createSlice({\n  name: 'research',\n  initialState,\n  reducers: {\n    searchCasesStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    searchCasesSuccess: (state, action) => {\n      state.loading = false;\n      state.searchResults = action.payload;\n    },\n    searchCasesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    predictOutcomeStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    predictOutcomeSuccess: (state, action) => {\n      state.loading = false;\n      state.prediction = action.payload;\n    },\n    predictOutcomeFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setSearchQuery: (state, action) => {\n      state.searchQuery = action.payload;\n    },\n    setSelectedCase: (state, action) => {\n      state.selectedCase = action.payload;\n    },\n    clearPrediction: (state) => {\n      state.prediction = null;\n    },\n    clearError: (state) => {\n      state.error = null;\n    }\n  }\n});\n\nexport const {\n  searchCasesStart,\n  searchCasesSuccess,\n  searchCasesFailure,\n  predictOutcomeStart,\n  predictOutcomeSuccess,\n  predictOutcomeFailure,\n  setSearchQuery,\n  setSelectedCase,\n  clearPrediction,\n  clearError\n} = researchSlice.actions;\n\n// Thunk actions\nexport const searchCases = (query, filters) => async (dispatch) => {\n  try {\n    dispatch(searchCasesStart());\n    dispatch(setSearchQuery(query));\n    \n    // In a real app, this would call the API service\n    // const response = await researchService.searchCases(query, filters);\n    \n    // Simulate API call for demo\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    const response = [\n      {\n        id: '1',\n        title: 'Smith v. Jones (2023)',\n        content: 'The court ruled in favor of the plaintiff, finding that the defendant had breached the contract by failing to deliver the goods on time.',\n        source: 'Supreme Court',\n        relevance_score: 0.95\n      },\n      {\n        id: '2',\n        title: 'Wilson Corp v. Allen Inc (2022)',\n        content: 'The court found that the non-compete clause was overly broad and therefore unenforceable under state law.',\n        source: 'Court of Appeals',\n        relevance_score: 0.87\n      },\n      {\n        id: '3',\n        title: 'Parker LLC v. Thompson (2021)',\n        content: 'The court held that the defendant was not liable for damages as the force majeure clause in the contract covered the circumstances in question.',\n        source: 'District Court',\n        relevance_score: 0.82\n      }\n    ];\n    \n    dispatch(searchCasesSuccess(response));\n    return response;\n  } catch (error) {\n    dispatch(searchCasesFailure(error.message));\n    throw error;\n  }\n};\n\nexport const predictOutcome = (caseDetails, llmModel) => async (dispatch) => {\n  try {\n    dispatch(predictOutcomeStart());\n    \n    // In a real app, this would call the API service\n    // const response = await researchService.predictOutcome(caseDetails, llmModel);\n    \n    // Simulate API call for demo\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    const response = {\n      prediction: \"Based on the provided information and similar cases, the court is likely to rule in favor of the plaintiff.\",\n      confidence: 0.78,\n      factors: [\n        { name: \"Precedent in similar cases\", impact: \"high\" },\n        { name: \"Strength of evidence\", impact: \"medium\" },\n        { name: \"Applicable statutes\", impact: \"medium\" },\n        { name: \"Jurisdiction tendencies\", impact: \"low\" }\n      ],\n      similar_cases: [\n        { case_name: \"Smith v. Jones (2023)\", similarity: 0.85 },\n        { case_name: \"Wilson Corp v. Allen Inc (2022)\", similarity: 0.72 },\n        { case_name: \"Parker LLC v. Thompson (2021)\", similarity: 0.68 }\n      ],\n      llm_model: llmModel\n    };\n    \n    dispatch(predictOutcomeSuccess(response));\n    return response;\n  } catch (error) {\n    dispatch(predictOutcomeFailure(error.message));\n    throw error;\n  }\n};\n\nexport default researchSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}