{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: false,\n  error: null,\n  settings: {\n    llmProvider: 'openai',\n    llmModel: 'gpt-4',\n    apiKey: ''\n  }\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.loading = false;\n      state.user = action.payload.user;\n      state.isAuthenticated = true;\n    },\n    loginFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n      state.isAuthenticated = false;\n    },\n    registerStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    registerSuccess: state => {\n      state.loading = false;\n    },\n    registerFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateSettingsStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateSettingsSuccess: (state, action) => {\n      state.loading = false;\n      state.settings = action.payload;\n    },\n    updateSettingsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  registerStart,\n  registerSuccess,\n  registerFailure,\n  updateSettingsStart,\n  updateSettingsSuccess,\n  updateSettingsFailure,\n  clearError\n} = userSlice.actions;\n\n// Thunk actions\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch(loginStart());\n    const response = await fetch('http://localhost:8000/auth/login', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    dispatch(loginSuccess(data));\n    return data;\n  } catch (error) {\n    dispatch(loginFailure(error.message));\n    throw error;\n  }\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch(registerStart());\n    const response = await fetch('http://localhost:8000/auth/register', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Registration failed');\n    }\n    dispatch(registerSuccess());\n  } catch (error) {\n    dispatch(registerFailure(error.message));\n    throw error;\n  }\n};\nexport const updateSettings = settings => async dispatch => {\n  try {\n    dispatch(updateSettingsStart());\n    const response = await fetch('http://localhost:8000/auth/settings', {\n      method: 'PUT',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(settings)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update settings');\n    }\n    const data = await response.json();\n    dispatch(updateSettingsSuccess(data));\n  } catch (error) {\n    dispatch(updateSettingsFailure(error.message));\n    throw error;\n  }\n};\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","user","isAuthenticated","loading","error","settings","llmProvider","llmModel","apiKey","userSlice","name","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","logout","registerStart","registerSuccess","registerFailure","updateSettingsStart","updateSettingsSuccess","updateSettingsFailure","clearError","actions","login","email","password","dispatch","response","fetch","method","credentials","headers","body","JSON","stringify","ok","Error","data","json","message","register","updateSettings","reducer"],"sources":["/Users/venkata/startup/legal_app/frontend/src/store/userSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: false,\n  error: null,\n  settings: {\n    llmProvider: 'openai',\n    llmModel: 'gpt-4',\n    apiKey: ''\n  }\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.loading = false;\n      state.user = action.payload.user;\n      state.isAuthenticated = true;\n    },\n    loginFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n      state.isAuthenticated = false;\n    },\n    registerStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    registerSuccess: (state) => {\n      state.loading = false;\n    },\n    registerFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateSettingsStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateSettingsSuccess: (state, action) => {\n      state.loading = false;\n      state.settings = action.payload;\n    },\n    updateSettingsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    clearError: (state) => {\n      state.error = null;\n    }\n  }\n});\n\nexport const { \n  loginStart, \n  loginSuccess, \n  loginFailure, \n  logout, \n  registerStart, \n  registerSuccess, \n  registerFailure,\n  updateSettingsStart,\n  updateSettingsSuccess,\n  updateSettingsFailure,\n  clearError\n} = userSlice.actions;\n\n// Thunk actions\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch(loginStart());\n    const response = await fetch('http://localhost:8000/auth/login', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n\n    const data = await response.json();\n    dispatch(loginSuccess(data));\n    return data;\n  } catch (error) {\n    dispatch(loginFailure(error.message));\n    throw error;\n  }\n};\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch(registerStart());\n    const response = await fetch('http://localhost:8000/auth/register', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name, email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Registration failed');\n    }\n\n    dispatch(registerSuccess());\n  } catch (error) {\n    dispatch(registerFailure(error.message));\n    throw error;\n  }\n};\n\nexport const updateSettings = (settings) => async (dispatch) => {\n  try {\n    dispatch(updateSettingsStart());\n    const response = await fetch('http://localhost:8000/auth/settings', {\n      method: 'PUT',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(settings),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update settings');\n    }\n\n    const data = await response.json();\n    dispatch(updateSettingsSuccess(data));\n  } catch (error) {\n    dispatch(updateSettingsFailure(error.message));\n    throw error;\n  }\n};\n\nexport default userSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}